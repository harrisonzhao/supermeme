// Package models contains the types for schema 'alpha'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Meme represents a row from 'alpha.meme'.
type Meme struct {
	ID           int            `json:"id"`             // id
	Source       Source         `json:"source"`         // source
	URL          sql.NullString `json:"url"`            // url
	TopText      string         `json:"top_text"`       // top_text
	BottomText   string         `json:"bottom_text"`    // bottom_text
	NetUps       sql.NullInt64  `json:"net_ups"`        // net_ups
	Views        sql.NullInt64  `json:"views"`          // views
	NumKeywords  sql.NullInt64  `json:"num_keywords"`   // num_keywords
	MemeName     sql.NullString `json:"meme_name"`      // meme_name
	ImgurBgImage sql.NullString `json:"imgur_bg_image"` // imgur_bg_image

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Meme exists in the database.
func (m *Meme) Exists() bool {
	return m._exists
}

// Deleted provides information if the Meme has been deleted from the database.
func (m *Meme) Deleted() bool {
	return m._deleted
}

// Insert inserts the Meme to the database.
func (m *Meme) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO alpha.meme (` +
		`source, url, top_text, bottom_text, net_ups, views, num_keywords, meme_name, imgur_bg_image` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, m.Source, m.URL, m.TopText, m.BottomText, m.NetUps, m.Views, m.NumKeywords, m.MemeName, m.ImgurBgImage)
	res, err := db.Exec(sqlstr, m.Source, m.URL, m.TopText, m.BottomText, m.NetUps, m.Views, m.NumKeywords, m.MemeName, m.ImgurBgImage)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	m.ID = int(id)
	m._exists = true

	return nil
}

// Update updates the Meme in the database.
func (m *Meme) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE alpha.meme SET ` +
		`source = ?, url = ?, top_text = ?, bottom_text = ?, net_ups = ?, views = ?, num_keywords = ?, meme_name = ?, imgur_bg_image = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, m.Source, m.URL, m.TopText, m.BottomText, m.NetUps, m.Views, m.NumKeywords, m.MemeName, m.ImgurBgImage, m.ID)
	_, err = db.Exec(sqlstr, m.Source, m.URL, m.TopText, m.BottomText, m.NetUps, m.Views, m.NumKeywords, m.MemeName, m.ImgurBgImage, m.ID)
	return err
}

// Save saves the Meme to the database.
func (m *Meme) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Delete deletes the Meme from the database.
func (m *Meme) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM alpha.meme WHERE id = ?`

	// run query
	XOLog(sqlstr, m.ID)
	_, err = db.Exec(sqlstr, m.ID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MemeByID retrieves a row from 'alpha.meme' as a Meme.
//
// Generated from index 'meme_id_pkey'.
func MemeByID(db XODB, id int) (*Meme, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, source, url, top_text, bottom_text, net_ups, views, num_keywords, meme_name, imgur_bg_image ` +
		`FROM alpha.meme ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	m := Meme{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.ID, &m.Source, &m.URL, &m.TopText, &m.BottomText, &m.NetUps, &m.Views, &m.NumKeywords, &m.MemeName, &m.ImgurBgImage)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
