// Package models contains the types for schema 'alpha'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// SystemMetadatum represents a row from 'alpha.system_metadata'.
type SystemMetadatum struct {
	MessageID   string        `json:"message_id"`   // message_id
	MessengerID string        `json:"messenger_id"` // messenger_id
	MemeID      int           `json:"meme_id"`      // meme_id
	IsUpvote    sql.NullInt64 `json:"is_upvote"`    // is_upvote

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SystemMetadatum exists in the database.
func (sm *SystemMetadatum) Exists() bool {
	return sm._exists
}

// Deleted provides information if the SystemMetadatum has been deleted from the database.
func (sm *SystemMetadatum) Deleted() bool {
	return sm._deleted
}

// Insert inserts the SystemMetadatum to the database.
func (sm *SystemMetadatum) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO alpha.system_metadata (` +
		`messenger_id, meme_id, is_upvote` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, sm.MessengerID, sm.MemeID, sm.IsUpvote)
	res, err := db.Exec(sqlstr, sm.MessengerID, sm.MemeID, sm.IsUpvote)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	sm.MessageID = string(id)
	sm._exists = true

	return nil
}

// Update updates the SystemMetadatum in the database.
func (sm *SystemMetadatum) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE alpha.system_metadata SET ` +
		`messenger_id = ?, meme_id = ?, is_upvote = ?` +
		` WHERE message_id = ?`

	// run query
	XOLog(sqlstr, sm.MessengerID, sm.MemeID, sm.IsUpvote, sm.MessageID)
	_, err = db.Exec(sqlstr, sm.MessengerID, sm.MemeID, sm.IsUpvote, sm.MessageID)
	return err
}

// Save saves the SystemMetadatum to the database.
func (sm *SystemMetadatum) Save(db XODB) error {
	if sm.Exists() {
		return sm.Update(db)
	}

	return sm.Insert(db)
}

// Delete deletes the SystemMetadatum from the database.
func (sm *SystemMetadatum) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sm._exists {
		return nil
	}

	// if deleted, bail
	if sm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM alpha.system_metadata WHERE message_id = ?`

	// run query
	XOLog(sqlstr, sm.MessageID)
	_, err = db.Exec(sqlstr, sm.MessageID)
	if err != nil {
		return err
	}

	// set deleted
	sm._deleted = true

	return nil
}

// Meme returns the Meme associated with the SystemMetadatum's MemeID (meme_id).
//
// Generated from foreign key 'system_metadata_ibfk_1'.
func (sm *SystemMetadatum) Meme(db XODB) (*Meme, error) {
	return MemeByID(db, sm.MemeID)
}

// SystemMetadataByMemeID retrieves a row from 'alpha.system_metadata' as a SystemMetadatum.
//
// Generated from index 'meme_id'.
func SystemMetadataByMemeID(db XODB, memeID int) ([]*SystemMetadatum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`message_id, messenger_id, meme_id, is_upvote ` +
		`FROM alpha.system_metadata ` +
		`WHERE meme_id = ?`

	// run query
	XOLog(sqlstr, memeID)
	q, err := db.Query(sqlstr, memeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*SystemMetadatum{}
	for q.Next() {
		sm := SystemMetadatum{
			_exists: true,
		}

		// scan
		err = q.Scan(&sm.MessageID, &sm.MessengerID, &sm.MemeID, &sm.IsUpvote)
		if err != nil {
			return nil, err
		}

		res = append(res, &sm)
	}

	return res, nil
}

// SystemMetadataByMessengerID retrieves a row from 'alpha.system_metadata' as a SystemMetadatum.
//
// Generated from index 'messenger_id_idx'.
func SystemMetadataByMessengerID(db XODB, messengerID string) ([]*SystemMetadatum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`message_id, messenger_id, meme_id, is_upvote ` +
		`FROM alpha.system_metadata ` +
		`WHERE messenger_id = ?`

	// run query
	XOLog(sqlstr, messengerID)
	q, err := db.Query(sqlstr, messengerID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*SystemMetadatum{}
	for q.Next() {
		sm := SystemMetadatum{
			_exists: true,
		}

		// scan
		err = q.Scan(&sm.MessageID, &sm.MessengerID, &sm.MemeID, &sm.IsUpvote)
		if err != nil {
			return nil, err
		}

		res = append(res, &sm)
	}

	return res, nil
}

// SystemMetadatumByMessageID retrieves a row from 'alpha.system_metadata' as a SystemMetadatum.
//
// Generated from index 'system_metadata_message_id_pkey'.
func SystemMetadatumByMessageID(db XODB, messageID string) (*SystemMetadatum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`message_id, messenger_id, meme_id, is_upvote ` +
		`FROM alpha.system_metadata ` +
		`WHERE message_id = ?`

	// run query
	XOLog(sqlstr, messageID)
	sm := SystemMetadatum{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, messageID).Scan(&sm.MessageID, &sm.MessengerID, &sm.MemeID, &sm.IsUpvote)
	if err != nil {
		return nil, err
	}

	return &sm, nil
}
